[{"content":"Pre-requisites Redis Server Redis can be installed directly on the machine by following this\ninstallation guidelines by DigitalOcean.\nHowever, for the examples shown here, I run the Redis server in a Docker container.\nIn case a system wide instance redis-server is running already shut it down first to avoid port conflicts:\n1  $ /etc/init.d/redis-server stop   1 2 3 4 5 6 7  FROMredis:5.0.9-alpineCOPY redis.conf /etc/redis.confRUN chmod 777 /etc/redis.confCMD [ \u0026#34;redis-server\u0026#34;, \u0026#34;/etc/redis.conf\u0026#34; ]  # redis.conf requirepass my-secret-password To build an image called \u0026ldquo;redis\u0026rdquo; run one of the following docker image build commands:\n1 2 3  $ docker image build --rm -t redis -f redis.Dockerfile . # if the file is called redis.Dockerfile $ # OR $ docker image build --rm -t redis .   To start the container from the created \u0026ldquo;redis\u0026rdquo; image\n1 2 3 4 5  $ docker container run --rm -p 6379:6379 --name redis redis $ # OR $ docker container run --rm -d -p 6379:6379 --name redis redis # deamonized $ # OR $ docker container run --rm [-it] -p 6379:6379 --name redis redis # interactive (see below for CLI usage)   To test and interact with the running redis container, start it up and connect to it with redis-cli:\n1 2 3 4 5 6 7  $ docker exec -it redis redis-cli -a my-secret-password [-h 127.0.0.1 -p 6379] 127.0.0.1:6379\u0026gt; ping PONG 127.0.0.1:6379\u0026gt; set hello world OK 127.0.0.1:6379\u0026gt; get hello \u0026#34;world\u0026#34;   Press ctrl+c to close redis-cli.\nRedis-Py Python can interact with the Redis server using the package redis-py.\nInstall it in your environment:\n1  (venv)$ pip install redis   Publish/Subscribe Publisher The publisher creates and publishes the message by providing the channel name and the message:\n1 2 3 4  from redis import Redis r = Redis.from_url(\u0026#39;redis://:my-secret-password@127.0.0.1:6379/0\u0026#39;) r.publish(\u0026#39;my-channel\u0026#39;, \u0026#39;a published message\u0026#39;)   Python objects can also be published, but must be serialized first (with pickle or json):\n1 2 3 4 5 6 7 8  import pickle from redis import Redis r = Redis.from_url(\u0026#39;redis://:my-secret-password@127.0.0.1:6379/0\u0026#39;) d = {\u0026#39;job_id\u0026#39;: \u0026#39;123-456-789\u0026#39;, \u0026#39;status\u0026#39; = \u0026#39;done\u0026#39;} r.publish(\u0026#39;my-channel\u0026#39;, pickle.dumps(d))   Subscriber The subscriber can subscribe to a channel channel and retrieve the message from it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  from redis import Redis r = Redis.from_url(\u0026#39;redis://:my-secret-password@127.0.0.1:6379/0\u0026#39;) p = r.pubsub() p.subscribe(\u0026#39;my-channel\u0026#39;) # multiple args possible to subscribe to more channels complete_message = p.get_message() print(complete_message) # this prints: # {\u0026#39;pattern\u0026#39;: None, \u0026#39;type\u0026#39;: \u0026#39;message\u0026#39;, \u0026#39;channel\u0026#39;: b\u0026#39;my_channel\u0026#39;, \u0026#39;data\u0026#39;: b\u0026#39;a published message\u0026#39;} complete_message = p.get_message() print(complete_message) # if no new messages have been published this prints: # None   The published message can be found under p.get_message()['data'].\nIn case of messages being seriealized, just de-serialize them:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import pickle from redis import Redis r = Redis.from_url(\u0026#39;redis://:my-secret-password@127.0.0.1:6379/0\u0026#39;) p = r.pubsub() p.subscribe(\u0026#39;my-channel\u0026#39;) # multiple args possible to subscribe to more channels complete_message = p.get_message() if complete_message: message = pickle.loads(complete_message[\u0026#39;data\u0026#39;]) print(message) # this prints: # {\u0026#39;job_id\u0026#39;: \u0026#39;123-456-789\u0026#39;, \u0026#39;status\u0026#39; = \u0026#39;done\u0026#39;}   Callback Message Handler The subscriber can register a function to handle published messages:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import pickle from redis import Redis r = Redis.from_url(\u0026#39;redis://:my-secret-password@127.0.0.1:6379/0\u0026#39;) p = r.pubsub() def my_handler(message): m = pickle.loads(message[\u0026#39;data\u0026#39;]) print(f\u0026#34;Handler received this object: {m}\u0026#34;) p.subscribe(**{\u0026#39;my-channel\u0026#39;: my_handler}) message = p.get_message() # this will print # Handler received this object: {\u0026#39;job_id\u0026#39;: \u0026#39;123-456-789\u0026#39;, \u0026#39;status\u0026#39;: \u0026#39;done\u0026#39;} print(message) # this will print # None # because message has been consumed by the handler function.   Continuous Message Reading Blocking 1 2 3  for message in p.listen(): # do something with message[\u0026#39;data\u0026#39;] # eventually break out of the loop?   p.listen() is blocking. The process blocks and waits until a message is published.\nNot-Blocking 1 2 3 4 5 6  while True: message = p.get_message() if message: # do something with message[\u0026#39;data\u0026#39;] # eventually break out of the loop? time.sleep(1)   p.get_message() is not-blocking. If no new message has been published it simply returns None.\nAlternatively, an event loop may be started in a separate thread:\n1 2  p.subscribe(**{\u0026#39;my-channel\u0026#39;: my_handler}) thread = p.run_in_thread(sleep_time=1)   Messages must be processed by registered handler function when p.run_in_thread() is used!  The thread can be stopped with\n1  thread.stop()   ","description":"Publishing and subscribing to channels on a Redis message broker.","id":0,"section":"posts","tags":["redis","redis-py"],"title":"Pubsub with Redis \u0026 Redis-py","uri":"https://ostpoller.github.io/en/posts/20210116_redis-py_pubsub/"},{"content":"NOTE:\nThis document is very much a live document and will get updated frequently. Commands Files    Command Description     ctrl-x ctrl-f open file: find and open file   ctrl-x ctrl-s save file: save buffer in active window back to file on disk    Buffers    Command Description     ctrl-x b open buffer: open buffer in active window   ctrl-x k kill buffer: kill buffer and remove it from its window    Windows    Command Description     ctrl-x o switch window: activate another window (when frame is split in multiple windows        ","description":"A loose compilation of Emacs commands and configuration items serving as a quick reference.","id":1,"section":"posts","tags":["emacs",""],"title":"Emacs Commands \u0026 Configuration","uri":"https://ostpoller.github.io/en/posts/20210113_emacs/"},{"content":"The subprocess Module 1 2 3 4 5 6 7 8 9 10  import subprocess process = subprocess.Popen( [\u0026#34;executable\u0026#34;, \u0026#34;arg1\u0026#34;, \u0026#34;arg2\u0026#34;, ..., \u0026#34;argn\u0026#34;], # must be strings or pathlib.Path-like objects (with string representation) cwd=work_dir, # path to executable is always relative to cwd; executable is launched with cwd as working directory  stdout=subprocess.PIPE, stderr=subprocess.PIPE ) stdout, stderr = process.communicate() exit_code = process.returncode   Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  import subprocess from pathlib import Path def execute_binary(executable, arguments=[], work_dir=\u0026#39;.\u0026#39;): if not arguments: arguments = [] if not work_dir: work_dir = \u0026#39;.\u0026#39; workdir = Path(work_dir).absolute() process = subprocess.Popen( [executable] + list(str(arg) for arg in arguments), cwd=work_dir, # path to executable is always relative to cwd; executable is launched with cwd as working directory  stdout=subprocess.PIPE, stderr=subprocess.PIPE ) stdout, stderr = process.communicate() exit_code = process.returncode if exit_code: print(f\u0026#34;ERROR {exit_code}: something has gone wrong while executing the binary!\u0026#34;) else: print(f\u0026#34;INFO: all went well while executing the binary!\u0026#34;) print(f\u0026#34;STDOUT: {stdout.decode(\u0026#39;ascii\u0026#39;)}\u0026#34;) print(f\u0026#34;STDERR: {stderr.decode(\u0026#39;ascii\u0026#39;)}\u0026#34;) def execute_binary_2(executable, *args, **kwargs): work_dir = Path(kwargs.get(\u0026#34;work_dir\u0026#34;, \u0026#34;.\u0026#34;)).absolute() print(args) print(kwargs) print(work_dir) process = subprocess.Popen( [executable] + list(str(arg) for arg in args), cwd=work_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) stdout, stderr = process.communicate() exit_code = process.returncode if exit_code: print(f\u0026#34;ERROR {exit_code}: something has gone wrong while executing the binary!\u0026#34;) else: print(f\u0026#34;INFO: all went well while executing the binary!\u0026#34;) print(f\u0026#34;STDOUT: {stdout.decode(\u0026#39;ascii\u0026#39;)}\u0026#34;) print(f\u0026#34;STDERR: {stderr.decode(\u0026#39;ascii\u0026#39;)}\u0026#34;)   ","description":"Using Python's subprocess module to make system calls in a new process.","id":2,"section":"posts","tags":["python","subprocess"],"title":"Python subprocess","uri":"https://ostpoller.github.io/en/posts/20210113_python_subprocess/"},{"content":"Class Definition 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  # mymodule.py class MyParentClass: \u0026#34;\u0026#34;\u0026#34;A (parent) class to inherit from.\u0026#34;\u0026#34;\u0026#34; def __init__(self, parent_arg): print(f\u0026#34;Parent class constructor has been called with this argument: {parent_arg}\u0026#34;) class MyClass(MyParentClass): \u0026#34;\u0026#34;\u0026#34;Template class.\u0026#34;\u0026#34;\u0026#34; my_class_variable = None def __init__(self, arg): \u0026#34;\u0026#34;\u0026#34;Initialize instance object of class.\u0026#34;\u0026#34;\u0026#34; # assignment of instance variable self.my_instance_variable = arg # assignement of class variable self.__class__.my_class_variable = \u0026#39;foo\u0026#39; # call the __init__() method of the parent class super().__init__(\u0026#34;fuzzbuzz\u0026#34;) def __repr__(self): \u0026#34;\u0026#34;\u0026#34;String representation of class.\u0026#34;\u0026#34;\u0026#34; return (f\u0026#39;\u0026lt;{self.__class__.__name__}(\u0026#39; f\u0026#39;my_instance_variable={self.my_instance_variable!r}, \u0026#39; f\u0026#39;my_class_variable={self.__class__.my_class_variable!r})\u0026gt;\u0026#39; ) def a_method(self, obj_arg, cls_arg): \u0026#34;\u0026#34;\u0026#34;A standard instance method with access to class and object state.\u0026#34;\u0026#34;\u0026#34; self.my_instance_variable = obj_arg self.__class__.my_class_variable = cls_arg return \u0026#39;instance method called\u0026#39;, self @classmethod def a_classmethod(cls, cls_arg): \u0026#34;\u0026#34;\u0026#34;A classmethod with access to the class state only.\u0026#34;\u0026#34;\u0026#34; cls.my_class_variable = cls_arg return \u0026#39;class method called\u0026#39;, cls @classmethod def a_factoryfunction(cls, arg): \u0026#34;\u0026#34;\u0026#34;A factory function returning an instance of the class.\u0026#34;\u0026#34;\u0026#34; return cls(arg) @staticmethod def a_staticmethod(): \u0026#34;\u0026#34;\u0026#34;A static method with no access to class or object state.\u0026#34;\u0026#34;\u0026#34; return \u0026#39;static method called\u0026#39;   Variables Class Variables Class variables apply to all objects instanciated from the class. Changing it in one object changes it for all objects!\nClass variable can be reached through the class or the instanciated object:\n1 2 3 4 5 6 7 8  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj = MyClass(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026gt;\u0026gt;\u0026gt; my_obj.my_class_variable \u0026#39;foo\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.my_class_variable \u0026#39;foo\u0026#39;   Instance Variables Instance valiables are specific to the object. Changing it in one object, no other object instanciated from the same class is effected!\nInstance variables can only be reached through the instanciated object:\n1 2 3 4 5 6 7 8  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj = MyClass(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026gt;\u0026gt;\u0026gt; my_obj.my_instance_variable \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.my_instance_variable AttributeError...   WARNING:\nDo not accidentally shadow a class variable with an instance variable of the same name! Methods Instance or Object Methods Call through the Instance 1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj = MyClass(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026gt;\u0026gt;\u0026gt; my_obj.my_instance_variable \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.my_class_variable \u0026#39;foo\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj.a_method(\u0026#39;ham\u0026#39;, \u0026#39;eggs\u0026#39;) (\u0026#39;instance method called\u0026#39;, \u0026lt;MyClass(my_instance_variable=\u0026#39;ham\u0026#39;, my_class_variable=\u0026#39;eggs\u0026#39;)\u0026gt;) \u0026gt;\u0026gt;\u0026gt; my_obj.my_instance_variable \u0026#39;ham\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.my_class_variable \u0026#39;eggs\u0026#39;   Call through the Class Calling the standard method through the class fails:\n1 2 3  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; MyClass.a_method(\u0026#39;ham\u0026#39;, \u0026#39;eggs\u0026#39;) TypeError: method() missing 1 required positional argument: \u0026#39;cls_arg\u0026#39;   The error indicates that there is one argument missing. It is actually not cls_arg but self, the very first argument to this method and the reference to an class instance:\n1 2 3 4 5 6  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj = MyClass(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026gt;\u0026gt;\u0026gt; MyClass.a_method(my_obj, \u0026#39;ham\u0026#39;, \u0026#39;eggs\u0026#39;) (\u0026#39;instance method called\u0026#39;, \u0026lt;MyClass(my_instance_variable=\u0026#39;ham\u0026#39;, my_class_variable=\u0026#39;eggs\u0026#39;)\u0026gt;)   NOTE:\nThe syntax\n1 2  my_obj = MyClass(arg) MyClass.a_method(my_obj, \u0026#39;ham\u0026#39;, \u0026#39;eggs\u0026#39;)   is equivalent to\n1 2  my_obj = MyClass(arg) my_obj.a_method(\u0026#39;ham\u0026#39;, \u0026#39;eggs\u0026#39;)    Class Methods Call through the Instance 1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj = MyClass(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026gt;\u0026gt;\u0026gt; my_obj.my_instance_variable \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.my_class_variable \u0026#39;foo\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj.a_classmethod(\u0026#39;jam\u0026#39;) (\u0026#39;class method called\u0026#39;, \u0026lt;class \u0026#39;mymodule.MyClass\u0026#39;\u0026gt;) \u0026gt;\u0026gt;\u0026gt; my_obj.my_instance_variable \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.my_class_variable \u0026#39;jam\u0026#39;   Call through the Class Calling the class method through the class works just fine:\n1 2 3 4 5  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; MyClass.a_classmethod(\u0026#39;honey\u0026#39;) (\u0026#39;class method called\u0026#39;, \u0026lt;class \u0026#39;mymodule.MyClass\u0026#39;\u0026gt;) \u0026gt;\u0026gt;\u0026gt; MyClass.my_class_variable \u0026#39;honey\u0026#39;   Factory Functions Class methods can be utilized to implement the factory function pattern:\n1 2 3 4 5  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;cheese\u0026#39; \u0026gt;\u0026gt;\u0026gt; MyClass.a_factoryfunction(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026lt;MyClass(my_instance_variable=\u0026#39;cheese\u0026#39;, my_class_variable=\u0026#39;foo\u0026#39;)\u0026gt;   Static Methods Call through the Instance 1 2 3 4 5 6  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; arg = \u0026#39;bar\u0026#39; \u0026gt;\u0026gt;\u0026gt; my_obj = MyClass(arg) Parent class constructor has been called with this argument: fuzzbuzz \u0026gt;\u0026gt;\u0026gt; my_obj.a_staticmethod() \u0026#39;static method called\u0026#39;   Call through the Class 1 2 3  \u0026gt;\u0026gt;\u0026gt; from mymodule import MyClass \u0026gt;\u0026gt;\u0026gt; MyClass.a_staticmethod() \u0026#39;static method called\u0026#39;   ","description":"A template for a class in Python3 inspired by the book \"Python Tricks\" by Dan Bader.","id":3,"section":"posts","tags":["class","python"],"title":"A Python Class Template","uri":"https://ostpoller.github.io/en/posts/20210106_python_class_template/"},{"content":"Installation Select the link for your version and target platform from Github CoatiSoftare Sourcetrail, download extract it and run install.sh:\n1 2 3 4 5  $ cd ~/Downloads $ wget https://github.com/CoatiSoftware/Sourcetrail/releases/download/2020.2.43/Sourcetrail_2020_2_43_Linux_64bit.tar.gz $ tar -xvf Sourcetrail_2020_2_43_Linux_64bit.tar.gz $ cd Sourcetrail $ sudo ./install.sh   This will install Sourcetrail to /opt/sourcetrail/ and makes the command sourcetrail to start the application available via /usr/bin/sourcetrail\n1 2 3 4  $ sourcetrail 12:52:36 | LogManager.cpp:40 setLoggingEnabled() | INFO: Enabled logging for Sourcetrail 64 bit, version 2020.2.43 12:52:36 | SharedMemoryGarbageCollector.cpp:59 run() | INFO: start shared memory garbage collection ...   Index a Python Project Start Sourcetrail with $ sourcetrail and hit \u0026ldquo;New Project\u0026rdquo;.\nGive your Sourcetrail project a name and a directory where is can locate its project files and databases.\nSelect the Python source group, give it a name, point it to your virtual environment or Python interpreter executable and finally to your Python project directory.\nAfter hitting create indexing will start.\nWhen done, interactively explore the code \u0026hellip;\n","description":"Downloading, installing and getting started with Sourcetrail on Linux.","id":4,"section":"posts","tags":["sourcetrail"],"title":"Sourcetrail - Source Code Inspection and Visualization","uri":"https://ostpoller.github.io/en/posts/20210105_sourcetrail/"},{"content":"Text Boxes \u0026hellip; \u0026hellip; via Blockquote 1  \u0026gt; **_NOTE:_** The note content.    NOTE: The note content.\n \u0026hellip; via Horizontal Lines 1 2 3 4 5  --- **_NOTE:_** It works with almost all markdown flavours (the below blank line matters). ---   NOTE:\nIt works with almost all markdown flavours (the below blank line matters).\n\u0026hellip; via Bodyless Table 1 2  |![](/images/icons/info-96.png) | This is something I want you to notice. It has a lot of text, and I want that text to wrap within a cell to the right of the `NOTE`, instead of under it.| |-|-|       This is something I want you to notice. It has a lot of text, and I want that text to wrap within a cell to the right of the NOTE, instead of under it.    \u0026hellip; via Hugo (specific) Shortcodes Alert 1 2 3  {{\u0026lt; alert theme=\u0026#34;warning\u0026#34; \u0026gt;}} **this** is a warning {{\u0026lt; /alert \u0026gt;}}   Replace the theme=\u0026quot;warning\u0026quot; with theme=\u0026quot;info\u0026quot;, theme=\u0026quot;success\u0026quot; or theme=\u0026quot;danger\u0026quot;.\nthis is a warning this is an info this is a success this is a danger Notice 1 2 3  {{\u0026lt; notice success \u0026gt;}} success text {{\u0026lt; /notice \u0026gt;}}   Replace the notice success with notice info, notice warning or notice error.\nsuccess text  info text  warning text  error text  ","description":"Testing the capabilities of Markdown syntax in Hugo. This is very much a life document until a standard mark-up style has emerged.","id":5,"section":"posts","tags":["hugo","markdown"],"title":"Syntax in Markdown Source Files for Hugo","uri":"https://ostpoller.github.io/en/posts/20210104_markdown_in_hugo/"},{"content":"1  $ sudo apt reinstall fonts-noto-color-emoji   Restart Chrome after installing the font.\n","description":"If Chrome on Linux does not show emojis preperly, just reinstall them ...","id":6,"section":"posts","tags":["emojis","chrome","fonts"],"title":"Emojis in Google Chrome","uri":"https://ostpoller.github.io/en/posts/20210104_emojis_in_chrome/"},{"content":"To build and preview the site locally use the server bundled with Hugo:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  $ cd /path/to/hugo/project $ hugo server --disableFastRender Start building sites … | EN | DE -------------------+-----+------ Pages | 49 | 24 Paginator pages | 0 | 0 Non-page files | 0 | 0 Static files | 124 | 124 Processed images | 0 | 0 Aliases | 15 | 7 Sitemaps | 2 | 1 Cleaned | 0 | 0 Built in 943 ms Watching for changes in /path/to/hugo/project/{content,layouts,static,themes} Watching for config changes in path/to/hugo/project/config/_default Environment: \u0026#34;development\u0026#34; Serving pages from memory Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop   As the output suggests preview the rendered site in your browser under http://localhost:1313/.\n","description":"Build \u0026 Preview Static Web Site with Hugo","id":7,"section":"posts","tags":["hugo","static site generator"],"title":"Build \u0026 Preview Static Web Site with Hugo","uri":"https://ostpoller.github.io/en/posts/20210104_build_and_preview_with_hugo/"},{"content":"Source: Hugo \u0026gt; Getting Started \u0026gt; Installing\nThis web site is generated by Hugo.\nInstalling Hugo on Linux is as simple as dowloading a binary in a tarball, extracting it and make it available on the searchpath ($PATH).\n  Select a version and the platform architecture to install from the Hugo\u0026rsquo;s releases web page\n  Download the tarball:\n1 2  $ cd ~/Downloads $ wget https://github.com/gohugoio/hugo/releases/download/v0.80.0/hugo_0.80.0_Linux-64bit.tar.gz     Unpack the tarball:\n1 2 3 4  $ tar -xvf hugo_0.80.0_Linux-64bit.tar.gz LICENSE README.md hugo     Move the hugo executable to a directory on your searchpath:\n1  $ sudo mv hugo /usr/local/bin   Alternatively, move it to some other path and add that path to the PATH environment variable:\n1 2  $ mv hugo /my/tool/path $ export PATH=/my/tool/path:$PATH # add this to your .bashrc     Check if the hugo command can be executed:\n1 2  $ hugo version Hugo Static Site Generator v0.80.0-792EF0F4 linux/amd64 BuildDate: 2020-12-31T13:37:58Z     ","description":"Downloading and installing Hugo on Linux.","id":8,"section":"posts","tags":["hugo","static site generator"],"title":"Installing Hugo","uri":"https://ostpoller.github.io/en/posts/20210104_install_hugo/"},{"content":"The following commands show how to rename the \u0026ldquo;master\u0026rdquo; branch to \u0026ldquo;main\u0026rdquo;. This is only an example and is equally valid for any other branch. Just replace the names \u0026ldquo;master\u0026rdquo; and \u0026ldquo;main\u0026rdquo; accordingly.\n1 2 3 4 5 6 7 8  # cd into the local repo: $ cd /path/to/local/repo # switch to the \u0026#34;master\u0026#34; branch: $ git checkout master # rename it to \u0026#34;main\u0026#34;: $ git branch -m master main   The previous code renames the \u0026ldquo;master\u0026rdquo; branch in your local repo. However, the remote branch is still \u0026ldquo;master\u0026rdquo;:\n1 2 3 4 5  $ git status On branch main Your branch is up to date with \u0026#39;origin/master\u0026#39;. nothing to commit, working tree clean   Renaming the remote branch is achieved by pushing the new, local branch \u0026ldquo;main\u0026rdquo; to the remote, if the remote \u0026ldquo;master\u0026rdquo; have been your default branch, make \u0026ldquo;main\u0026rdquo; the new default branch and finally delete the \u0026ldquo;master\u0026rdquo; branch.\nMake sure your current local HEAD branch is still \u0026ldquo;main\u0026rdquo; when executing the following command:\n1 2 3 4 5 6 7 8  # push branch \u0026#34;main\u0026#34; to the remote repo and set it up for tracking from local \u0026#34;main\u0026#34;: $ git push -u origin main # delete the remote branch \u0026#34;master\u0026#34; # (this only works if origin/master is not default): $ git push origin --delete master To https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git - [deleted] master   If other repos are connected to the same remote repo, then the following commands convert the name in those as well:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  # switch to the \u0026#34;master\u0026#34; branch: $ git checkout master # rename it to \u0026#34;main\u0026#34;: $ git branch -m master main # get the latest commits (and branches!) from the remote: $ git fetch # remove the existing tracking connection with \u0026#34;origin/master\u0026#34;: $ git branch --unset-upstream # create a new tracking connection with the new \u0026#34;origin/main\u0026#34; branch: $ git branch -u origin/main   ","description":"Renaming local Git and remote Github branches.","id":9,"section":"posts","tags":["git","github"],"title":"Renaming Git Branches","uri":"https://ostpoller.github.io/en/posts/20210103_renaming_git_branch/"},{"content":"The terminal in PyCharm Community Edition 2020.1 throws a \u0026ldquo;Cannot open local terminal\u0026rdquo; error. To fix the error, re-compile libpty.so for the 64bit ARM architecture and the Raspbian \u0026ldquo;Buster\u0026rdquo; operating system.\n/opt/pycharm-community-2020.1/lib/pty4j-native/linux/x86/libpty.so\nis not compiled for AARCH64 (64bit ARM) and must be exchanged against\na natively compiled one:\n Clone https://github.com/JetBrains/pty4j.git In directory pty4j/native compile like shown:  gcc -fPIC -c *.c gcc -shared -o libpty.so *.o Copy the newly compiled libpty.so to\n/opt/pycharm-community-2020.1/lib/pty4j-native/linux/x86/libpty.so    ","description":"The terminal in PyCharm Community Edition 2020.1 throws a \"Cannot open local terminal\" error. To fix the error, re-compile libpty.so for the 64bit ARM architecture and the Raspbian \"Buster\" operating system.","id":10,"section":"posts","tags":["rpi","pycharm"],"title":"Fixing PyCharm Terminal on RPi4","uri":"https://ostpoller.github.io/en/posts/20210103_fixing-pycharm-on-rpi4/"},{"content":"Ben is drawing with pen on paper. The images have been scanned in \u0026hellip;\nCopyright ©️ Ben Westphal, 2021\n","description":"Ben's Graffiti Gallery","id":11,"section":"gallery","tags":null,"title":"Ben's Graffiti","uri":"https://ostpoller.github.io/en/gallery/ben/"},{"content":"In the past I have used several systems to keep notes for my references. I ended up in a mess because I generated and kept notes in various ways for my private projects as well as for my work projects - often overlapping, often in systems that could not easily exchange data. Further, the company I work for does not allow data-synchronization between systems we use at work and our private devices regardless whether the data is classified or not.\nSo, I looked around for a solution to write up unclassified notes that I wanted to keep for my own reference and that I could read and write from any device with an internet connection be it at work or at home.\nI want to write the articles and posts in a common mark-up language, like Markdown or ReStructuredText and not in HTML, a specific WIKI language or a WYSIWYG editor. The reason for this is, that I wanted maximum flexibility and interoperability:\n convert via Pandoc to stand-alone HTML, LATEX or PDF copy to and from project documentation like README.md files or the Sphinx documentation system bring it to other static site generators like Jekyll or Docusaurus (both used at work via gh-pages) read/write in a note taking system like Joplin etc.  GitHub - Source Code Repository All sources will be located in a private GitHub repo.\nHugo - Static Site Generation from MarkDown Files Through jamstack.org I got to know about Hugo, a static site generator writtin in Go. It is easy to install and has plenty of themes (site templates) to start developing your own website style from (this site has been build by adapting the Zzo theme).\nHugo ticks the boxes for writing the articles in Markdown and generating all necessary HTML, CSS and JS for an appealing and responsive web site.\nThe Github repo will be cloned to my private machines where I will be able to preview the site with the hugo server --disableFastRender command.\nInitially, the site is built with the command rm -rf public \u0026amp;\u0026amp; hugo. This command will render the site into the public directory, from where it can be copied or pushed to a server.\nGH-Pages - Serving the Static Site Initially, the freshly rendered site will be pushed to a repo where it will be served as a gh-pages.\nThe problem here is that the repo has to be public for the gh-pages to be served plus I need access to one of my machines where the hugo build tools and git are installed. This does not really tick my box on \u0026lsquo;write on any device with internet access\u0026rsquo;. So, in the future I will change the system.\nNetlify - Build and Serve the Site As far as I can tell right now Netlify is able to connect to a private Github repo and provides a build pipeline for Hugo that gets launched via a webhook when a new commit/push is detected. Finally it serves the freshly generated site.\nThis will then allow me to write articles anywhere (via accessing and committing the source code repo through a browser). Site generation and deployment is then happening at Netlify. This is my target setup but is still a little in the future\u0026hellip;\nFurther instructions: Hosting on Netlify.\n","description":"The first post on the new site, explaining what this site (ostpoller) will be about.","id":12,"section":"posts","tags":[""],"title":"Ostpoller Meta","uri":"https://ostpoller.github.io/en/posts/20210101_ostpoller-meta/"},{"content":"About the website - Ostpoller Ostpoller is a website with posts and articles around programming and software design mostly for my own usage and reference. Maybe, somebody else finds it useful \u0026hellip;\nAbout me - Philipp WESTPHAL I am a structural/mechanical engineer living and working in the greater area of Hamburg, Germany.\nAlso, I am a self-taught programmer and software developer, merging those skill sets as much as possible in my daily work as an (structural) stress engineer at Airbus.\nWhen I am not performing (numerical) assembly simulation for aircraft structure components, I am developing a microservice-based environment to host usefull engineering services mostly related, but not limited, to airframe structures.\nProfessional Career After school and mandatory civil service in 1995, I followed an 2.5 year apprenticeship to qualify as a professional boatbuilder at Rathje Werft, Kiel-Friedrichsort, Germany.\nIn 1998, after working for a few months as a boatbuilder, I moved to Southampton, UK, and studied Yacht \u0026amp; Powercraft Design at the Southampton Institute of Higher Education, nowadays Solent University, from where I graduated 3 years later with a 1st Class Honours Degree in Bachelor of Engineering.\nDuring the first 5 years after university, I worked as a structural designer and analyst for a UK-based company in Southampton producing Epoxy resins and pre-preg materials for the marine and wind energy market, SP Systems/SP Technologies, nowadays Gurit. My tasks were focused on designing, analysing and supervising the construction of the load-carrying structure of large and high performance sailing craft. This included\n luxury sailing yachts greater than 115ft, off-shore racing yachts (Maxi yacht), in-shore racing yachts (IACC 2007 America\u0026rsquo;s Cup yacht).  During my time at SP Technologies (2001-2006), I was seconded to Australia (Sydney, Northern Beaches) for one year to contribute in the hiring and training of local engineers for the company\u0026rsquo;s branch in Australia.\nJoining Airbus in Hamburg, Germany, in 2006, I participated in\n the resarch for industrial use of composite materials in the construction of large civil aircraft, the specific design work (sizing and certification) of primary structures for the composite aircraft A350, the development of structure analysis tools for sizing and for certification purposes.  Today at Airbus, most of my effort is concentrated on\n the (numerical, finite element based) simulation of manufacturing processes (mostly assembly), the continuous effort to digital transformation (development of a microservice-based environment).  Interests I do some basic electronic tinkering as well as setting up and maintaining my home network, private cloud server, various single-board-computer projects and Python coding projects. I currently dip my toes into low-level C programming.\nI like to go cycling and hiking in the great outdoors.\nContact  philipp dot westphal at gmx dot net  Disclaimer I take no responsibility for the content of external links. For the content of the linked pages, their operators are responsible, exclusively.\n","description":"Ostpoller, a website with posts and articles mostly for my own usage and reference. Maybe, somebody else finds it useful...","id":13,"section":"","tags":null,"title":"About","uri":"https://ostpoller.github.io/en/about/"}]